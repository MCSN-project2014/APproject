using System.Collections;
using System.Collections.Generic;

COMPILER Fun

	/*const int // types
	  undef = 0, integer = 1, boolean = 2, fun = 3, url = 4;

	const int // object kinds
	  var = 0, proc = 1, func = 2, form = 3, act=4;
	*/
	
	public SymbolTable   tab;
	public ASTGenerator  gen;

/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/

CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  CharInLine = ANY - '\r' - '\n'.
  AnyButDoubleQuote = CharInLine - '\"'.
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  ap =  '\'' .
 // urlchar = ( letter | digit | '-' | '_' |'.' | '~' | '!' | '*' | '\'' | ':' 
 //             | '@' | '&' | '=' | '+' | '$' | ',' | '/' | '?' | '%' | '#' | '[' | ']' ).

TOKENS
  ident  = letter {letter | digit}.
  url = ap "http://" {CharInLine} ap.
  number = digit {digit}.
  string = '"' {AnyButDoubleQuote | "\\\""} '"'.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf


IGNORE cr + lf + tab


PRODUCTIONS

/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/
							 
Fun =																			(. ASTNode node; .)
																				(. tab.OpenScope();  
																					node = new Node(Labels.Program); 
																					gen.initAST((Node) node); .)

		{ ProcDecl }
																				(. tab.CloseScope(); .).
   
                                                    
/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/
ProcDecl =																		 (. Types type; string name; Obj proc; Obj formal;
																				    RType rtype; ASTNode fundecl, node1; Term parameter;     .)
			"fun"																	
			(
			    Ident<out name>													 (. proc = tab.NewObj(name, Kinds.proc, Types.undef);
																				    fundecl = new Node(Labels.FunDecl, proc);
																				   
																				    tab.OpenScope(proc);                             .)
				'(' 
					{ Ident<out name> Type<out type>							 (. formal = tab.NewObj(name, Kinds.var, type); 
																				    tab.addFormal(proc,formal);
																				    parameter = new Term(formal);
																				    ((Node)fundecl).addChildren(parameter);           .)
				    {',' Ident<out name> Type<out type>							 (. formal = tab.NewObj(name, Kinds.var, type); 
																				    tab.addFormal(proc,formal); 
																				    parameter = new Term(formal);
																				    ((Node)fundecl).addChildren(parameter);               .)
					}
					}
				 ')'															 (. Node block = new Node(Labels.Block);  .)
				  RType<out rtype>												 (. tab.setRType(proc,rtype);        .)
		        '{' {   VarDecl<out node1>	         							 (. ((Node)block).addChildren(node1); .)	 
					  | Stat<out node1> 										 (. ((Node)block).addChildren(node1);    .) 
				 } '}'																
																			     (. ((Node)fundecl).addChildren(0,block);
																				    gen.addChildren((Node)fundecl);
																				    tab.CloseScope(); .)

			  | "main"															 (. tab.NewObj("Main", Kinds.proc, Types.undef);
																				    fundecl = new Node(Labels.Main);
																				    tab.OpenScope();	.)
																				 (. Node block = new Node(Labels.Block);  .) 	
				'(' ')' '{'  { VarDecl<out node1>								 (.	((Node)block).addChildren(node1);    .)
							  | Stat<out node1>      							 (. ((Node)block).addChildren(node1);    .) 		
						 }  '}'	
						    													 (. ((Node)fundecl).addChildren(0,block);
																					gen.addChildren((Node)fundecl);
																				    tab.CloseScope(); .)
			).   
			
/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/
                                                                
AProcDecl<out Obj robj, out ASTNode node> 									    (. string name; Types type; RType rtype; Obj formal;
																					ASTNode block, vardeclnode, statnode; Term parameter;.)
 =																				(. node = new Node(Labels.Afun);
																				   robj = tab.NewObj(null, Kinds.proc, Types.undef);		    
																				   tab.OpenScope(robj); .)	
			"fun"'(' {Ident<out name> Type<out type>							(. formal = tab.NewObj(name, Kinds.var, type); 
																				   tab.addFormal(robj,formal); 
																				   parameter = new Term(formal);
																				   ((Node)node).addChildren(parameter);.)
				      {',' Ident<out name> Type<out type>						(. formal = tab.NewObj(name, Kinds.var, type);
																				   tab.addFormal(robj,formal); 
																				   parameter = new Term(formal);
																				   ((Node)node).addChildren(parameter); .)
					  }} ')' RType<out rtype>									(. block = new Node(Labels.Block);
																				   tab.setRType(robj,rtype); .) 
																				              
		    '{' {	VarDecl<out vardeclnode>									(. ((Node)block).addChildren(vardeclnode); .)	
					| Stat<out statnode>                         			    (. ((Node)block).addChildren(statnode);    .)  
			 } '}'	  
																				(. ((Node)node).addChildren(0,block);
																				   tab.CloseScope(); .).
                                                              
/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/
                                                                             
Stat<out ASTNode node>															(. Types type,type1; string name,url; string name1; Obj obj, obj1, robj;
																				   Queue<Types> actualTypes = new Queue<Types>();
																			       ASTNode node1;  
																			       node = new Node(Labels.Assig); .) 
=																				
	Ident<out name>																(. obj = tab.Find(name); 
																					.)                                                               
		(                                                                    
			'='																	(. if ( obj.kind != Kinds.var )
																					   SemErr("cannot assign to procedure"); .)
				(                                                            
				                                                               
				      "async" '{' "return" Ident<out name1>						(. obj1 = tab.Find(name1);
																				   Node async =  new Node(Labels.Async);	
																				   Node call = new Node(Labels.FunCall, obj1); .)
								 '(' { (
									 	  CompleteExpr<out type, out node1>		(. actualTypes.Enqueue(type); 
																				   ((Node)call).addChildren(node1);	.) 
										  | AProcDecl<out robj, out node1>		(. actualTypes.Enqueue(Types.fun);
																				   ((Node)call).addChildren(node1); .)
										)

									 {','(
										   CompleteExpr<out type, out node1>	(. actualTypes.Enqueue(type);
																				   ((Node)call).addChildren(node1); .) 
										   | AProcDecl<out robj, out node1>	    (. actualTypes.Enqueue(Types.fun);
																				   ((Node)call).addChildren(node1); .)
										  )
									 } } ')'									
											 '}'';'								(. ((Node)async).addChildren(call);
																				   ((Node)node).addChildren(new Term(obj));
																				   ((Node)node).addChildren(async); .)
																				(. if (obj1.kind != Kinds.proc) 
																				       SemErr("object is not a procedure");
																				   else if(tab.getAsyncControl(obj1))
																					   SemErr("procedure " + obj1.name + " contain println or readln ");																				   																				   
																				   if (obj1.type == Types.fun)
																					   SemErr("wrong return type");
																					
																				   tab.checkActualFormalTypes(obj1, actualTypes); 
																				   if(obj.type != obj1.type) 
																					   SemErr("incompatible types"); .)
					| "dasync" '{'												(. Node dasync = new Node(Labels.Dsync); .)
								  ( 
									Ident<out name1>							(. obj1 = tab.Find(name1);
																				   if (obj1.type != Types.url)
																						SemErr("url expected");
																				   dasync.addChildren(new Term(obj1)); .)
								  
								   |URL<out url> 								(.  dasync.addChildren(new Term(url));  .)
								  )		   				
					              ','Ident<out name1>							(.  obj1 = tab.Find(name1);
																				   	
																				   Node call = new Node(Labels.FunCall, obj1); .)
								 '(' { (
									 	  CompleteExpr<out type, out node1>		(. actualTypes.Enqueue(type); 
																				   ((Node)call).addChildren(node1);	.) 
										  | AProcDecl<out robj, out node1>		(. actualTypes.Enqueue(Types.fun);
																				   ((Node)call).addChildren(node1); .)
										)

									 {','(
										   CompleteExpr<out type, out node1>	(. actualTypes.Enqueue(type);
																				   ((Node)call).addChildren(node1); .) 
										   | AProcDecl<out robj, out node1>	    (. actualTypes.Enqueue(Types.fun);
																				   ((Node)call).addChildren(node1); .)
										  )
									 } } ')'									
											 '}'';'								(. ((Node)dasync).addChildren(call);
																				   ((Node)node).addChildren(new Term(obj));
																				   ((Node)node).addChildren(dasync); .)
																				(. if (obj1.kind != Kinds.proc) 
																				       SemErr("object is not a procedure");
																				   else if(tab.getAsyncControl(obj1))
																					   SemErr("procedure " + obj1.name + " contain println or readln ");																				   																				   
																				   if (obj1.type == Types.fun)
																					   SemErr("wrong return type");
																					
																				   tab.checkActualFormalTypes(obj1, actualTypes); 
																				   if(obj.type != obj1.type) 
																					   SemErr("incompatible types"); .)

					| CompleteExpr<out type, out node1>';'					    (. if (type != obj.type)
																					    SemErr("incompatible types");
																				   ((Node)node).addChildren(new Term(obj));
																				   ((Node)node).addChildren(node1); .)

					| AProcDecl<out robj, out node1>';'							(. ((Node)node).addChildren(new Term(obj));
																				   ((Node)node).addChildren(node1); .)

					| "readln" '('')' ';'									    (.  tab.setAsyncControl(true);
																					if(obj.type != Types.integer) 
																						SemErr("incompatible types");
																				   ((Node)node).addChildren(new Term(obj)); 
																				   ((Node)node).addChildren(new Node(Labels.Read));
																				 .) 
				                                                              
				)                                                            
			                                                                 
			| '('																(. node = new Node(Labels.FunCall, obj);
																				   Obj owner = tab.getOwner();
																				   if(owner != null){
																				     if (owner.name == obj.name){
																						 owner.recursive = true;
																					  }
																					} 
																				.)
																				   
				  { ( 
					    CompleteExpr<out type, out node1>						(. actualTypes.Enqueue(type);
																				   ((Node)node).addChildren(node1); .)
					   | AProcDecl<out robj, out node1>							(. actualTypes.Enqueue(Types.fun);
																				   ((Node)node).addChildren(node1); .)
					 
					 )											 
				  { ','
				      ( 
						CompleteExpr<out type, out node1>						(. actualTypes.Enqueue(type); 
																				   ((Node)node).addChildren(node1); .)
						| AProcDecl<out robj, out node1>						(. actualTypes.Enqueue(Types.fun);
																				   ((Node)node).addChildren(node1); .)
					  ) 
				  } } ')' ';'													(. if (!(obj.type == Types.fun || obj.kind == Kinds.proc) ) 
																						SemErr("object is not a function");
																				   else if (obj.type != Types.fun)
																						tab.checkActualFormalTypes(obj,actualTypes); .)
                                                                                
			                                                                  
		)                                                       
		                                                                     
	| "if" CompleteExpr<out type, out node1>									   (.  node = new Node(Labels.If);
																				       ((Node)node).addChildren(node1);
																					   Node thenBlock = new Node(Labels.Block);
																					   if (type != Types.boolean) 
																						  SemErr("boolean type expected"); .)
																					(. tab.OpenScope(); .) 
	 '{' { Stat<out node1>															(. ((Node)thenBlock).addChildren(node1); .) 
		   | VarDecl<out node1>														(. ((Node)thenBlock).addChildren(node1); .)	 
	  } '}'																			(. ((Node)node).addChildren(thenBlock);
																						tab.CloseScope(); .)

	  [																				(. tab.OpenScope(); .)
	   "else"																		(. Node elseBlock = new Node(Labels.Block); .)
	  '{' {    Stat<out node1>														(. ((Node)elseBlock).addChildren(node1);.) 
			| VarDecl<out node1>													(. ((Node)elseBlock).addChildren(node1); .)	 	
	   } '}'																		(. ((Node)node).addChildren(elseBlock);
																					   tab.CloseScope(); .)
	  ] 
	                                 
	| "while" CompleteExpr<out type, out node1>									    (. node = new Node(Labels.While);
																					   ((Node)node).addChildren(node1);
																					   Node whileBlock =new Node(Labels.Block);
																					   if (type != Types.boolean) 
																					       SemErr("boolean type expected"); .) 
	   																				(. tab.OpenScope(); .) 
	 '{' {   Stat<out node1>														(. ((Node)whileBlock).addChildren(node1);.) 
		   | VarDecl<out node1>														(. ((Node)whileBlock).addChildren(node1); .)	 
	  } '}'																			(.  ((Node)node).addChildren(whileBlock);
																						tab.CloseScope(); .)
	                                
	| "for"																				    (. tab.OpenScope(); 
																							   node = new Node(Labels.For); .) 
	   "var" Ident<out name> Type<out type> '=' CompleteExpr<out type1, out node1>';'	    (. if (type != type1)
																								   SemErr("incompatible types");
																							   obj = tab.NewObj(name, Kinds.var, type);
																							   Node declAssig = new Node (Labels.AssigDecl);
																							   ((Node)declAssig).addChildren(new Term(obj));
																							   ((Node)declAssig).addChildren(node1);
																							   ((Node)node).addChildren(declAssig); .)
		    CompleteExpr<out type, out node1>';'											(. ((Node)node).addChildren(node1);
																							   if (type != Types.boolean) 
																								   SemErr("boolean type expected"); .)
		    Ident<out name1> '=' CompleteExpr<out type, out node1>						    (. obj = tab.Find(name1); 
																							   Node assig = new Node(Labels.Assig);
																							   ((Node)assig).addChildren(new Term(obj));
																							   ((Node)assig).addChildren(node1);
																							   ((Node)node).addChildren(assig);
																							   Node forBlock =new Node(Labels.Block);
																							   if (type != obj.type)
					    																		   SemErr("incompatible types"); .)				
			  																		
	 '{' { Stat<out node1>																	(. ((Node)forBlock).addChildren(node1);.) 
		   | VarDecl<out node1>																(. ((Node)forBlock).addChildren(node1); .)	 
	  } '}'																					(. ((Node)node).addChildren(forBlock);
																								tab.CloseScope(); .)
																				
    | "println"'('																(.  tab.setAsyncControl(true);
																					node = new Node(Labels.Print); .)
				  ( CompleteExpr<out type, out node1>							(.  ((Node)node).addChildren(node1); .)
				    |string													    (. ((Node)node).addChildren(new Term(t.val)); .)
				  )
				  ')' ';'						
																				  
		
	| "return"																	(. node = new Node(Labels.Return);
																				   bool controlofblock; .)
			(  
    			                                                               
   				CompleteExpr<out type, out node1> ';'						    (. ((Node)node).addChildren(node1);
																				   tab.getOwner(out obj , out controlofblock);
																				   if(obj != null){
																						if(controlofblock)
																							obj.returnIsSet=true;
																						if( obj.type != type )
																							SemErr("incompatible return type");
																					} else {
																						 SemErr("return is not expected");
																					}
																				 .)
																					                                                 
			   | AProcDecl<out robj,out node1> ';'                                  (. ((Node)node).addChildren(node1);
																					tab.getOwner(out obj,out controlofblock);
																					if(obj != null){ 
																						if(controlofblock)
																							obj.returnIsSet=true;
																						tab.complexReturnTypeControl(obj,robj);
																					}else {
																						 SemErr("return is not expected");
																					} .) 
			).

/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/

VarDecl<out ASTNode node>														(. string name,url; ArrayList names = new ArrayList(); 
																					Types type; Types type1; Obj obj, afobj; ASTNode node1;.)

=		  "var" Ident<out name>													(. node =  new Node (Labels.AssigDecl);
																				   names.Add(name); .)	
		  (
			',' Ident<out name>													(. names.Add(name); .) 
			{',' Ident<out name>												(. names.Add(name); .)
			} Type<out type> ';'												(. node =  new Node (Labels.Decl);
																				   foreach(string n in names)
																				   {
						    															obj = tab.NewObj(n, Kinds.var, type);
																						((Node)node).addChildren(new Term (obj)); 

																					} 
																				.)
			
			| Type<out type>
			  
			  (
				';'																(. obj  =  tab.NewObj((string)names[0], Kinds.var, type);
																				   node =  new Node (Labels.Decl);
																				   ((Node)node).addChildren(new Term (obj));                             .)
				| '=' 
					(	"readln" '('')'';'										(. tab.setAsyncControl(true);
																				   if(type != Types.integer)
																					  SemErr("incompatible types"); 
																				   obj = tab.NewObj((string)names[0], Kinds.var, type);
																				   node =  new Node (Labels.AssigDecl);
																				   ((Node)node).addChildren(new Term (obj));
																				   ((Node)node).addChildren(new Node(Labels.Read)); .)	

					    | CompleteExpr<out type1, out node1>';'				    (. if (type != type1) 
																					   SemErr("incompatible types");
					 															   obj = tab.NewObj((string)names[0], Kinds.var, type); 
																				   node =  new Node (Labels.AssigDecl);
																				   ((Node)node).addChildren(new Term (obj));
																				   ((Node)node).addChildren(node1); .)	
																				   	 
						| AProcDecl<out afobj,out node1> ';'					(. if (type != Types.fun) 
																					   SemErr("incompatible types");
					 															   obj = tab.NewObj((string)names[0], Kinds.var, type); 
																				   node =  new Node (Labels.AssigDecl);
																				   ((Node)node).addChildren(new Term (obj));
																				   ((Node)node).addChildren(node1);   .)
						| URL<out url> ';'										(. if (type != Types.url)
																					   SemErr("imcompatible Types");
																					obj = tab.NewObj((string)names[0], Kinds.var, type);
																					node =  new Node (Labels.AssigDecl);
																					((Node)node).addChildren(new Term (obj));
																					((Node)node).addChildren(new Term (url)); .)
					)
			  )
		  
		  ).
		  
/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/		  

CompleteExpr<out Types type, out ASTNode node>									 (. Types type1; ASTNode op, firstExpr, secondExpr; .)
= Expr<out type,out node>													 
  { BoolOp<out op>																 
	Expr<out type1,out secondExpr>			          							 (. if (type != type1)
																						SemErr("incompatible types");
																					type = Types.boolean; 
																					((Node)op).addChildren(node);
																					((Node)op).addChildren(secondExpr);
																				    node = op; .)
  }.

/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/		  

Expr<out Types type,out ASTNode node>											 (. Types type1; ASTNode op, firstSimpExpr, secondSimpExpr; .)
= SimpExpr<out type, out node>											 
  [ RelOp<out op>																 
	SimpExpr<out type1, out secondSimpExpr>										 (. if (type != type1)
																	         		    SemErr("incompatible types");
																				    type = Types.boolean;
																					((Node)op).addChildren(node);
																					((Node)op).addChildren(secondSimpExpr); 
																					 node = op; .) 
  ].

/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/		  

SimpExpr<out Types type, out ASTNode node>										 (. Types type1; ASTNode op, secondTerm; .)
= Term<out type, out node>													     	 
  { AddOp<out op>								
    Term<out type1,out secondTerm>						     					 (. if (type != Types.integer || type1 != Types.integer)
																					   SemErr("integer type expected"); 
																					((Node)op).addChildren(node);
																					((Node)op).addChildren(secondTerm);
																					node = op;
																				 .)
  }. 

/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/		  

Term<out Types type, out ASTNode node>  										(. Types type1; ASTNode op, firstfactor, secondfactor; .)
= Factor<out type, out node>												   
  { MulOp<out op>																
    Factor<out type1,out secondfactor>											(. if (type != Types.integer || type1 != Types.integer)
																					   SemErr("integer type expected");
																				   ((Node)op).addChildren(node);
																				   ((Node)op).addChildren(secondfactor);
																					node = op;    .)
  }.

/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/		  
URL<out String url>
= url												          (. url = t.val; .).
/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/		  
Factor<out Types type, out ASTNode node>									(. int n; Obj obj,robj; string name; Types type1; bool control = false;
																			   Queue<Types> actualTypes = new Queue<Types>(); ASTNode node1; .) 

=																				(. type = Types.undef;
																				   node = null;.)
	(																		    
		Ident<out name>															(. obj = tab.Find(name);
																				   node = new Term(obj); 
																				   type = obj.type; .) 
		[																		(. control = true; 
																				   node = new Node(Labels.FunCall, obj);
																				   Obj owner = tab.getOwner();
																				   if(owner != null){
																				   if (owner.name == obj.name){
																						owner.recursive = true;
			
																						}
																					} .)
		'(' { (
				 CompleteExpr<out type1, out node1>								(. actualTypes.Enqueue(type1);
																				   ((Node)node).addChildren(node1); .) 
				| AProcDecl<out robj, out node1>								(. actualTypes.Enqueue(Types.fun);
																				   ((Node)node).addChildren(node1); .)
			  
			  )

			 { ','
				(
				  CompleteExpr<out type1, out node1>							(. actualTypes.Enqueue(type1); 
																				   ((Node)node).addChildren(node1); .)
				  | AProcDecl<out robj, out node1>								(. actualTypes.Enqueue(Types.fun);
																				   ((Node)node).addChildren(node1); .)
			  
			   ) 
			 } } ')'															(. if (!(obj.type == Types.fun || obj.kind == Kinds.proc) ) 
																						SemErr("object is not a function");
																				   else if (obj.type != Types.fun)
																						tab.checkActualFormalTypes(obj, actualTypes); .)
		]																		
																				(. if (!control && obj.kind != Kinds.var)
																				      SemErr("variable expected"); .)

		| number																(. n = Convert.ToInt32(t.val);
																				   node =  new Term(n);
																				   type = Types.integer; .)
		| '-'Factor<out type,out node1>											(. node = new Node(Labels.Negativ);
																				   ((Node)node).addChildren(node1);	
																				   if (type != Types.integer) 
																					   SemErr("integer type expected");
																				   type = Types.integer; .)
		| "true"																(. node = new Term(true);
																				   type = Types.boolean; .)
		| "false"																(. node = new Term(false);
																				   type = Types.boolean; .)
		|'(' CompleteExpr<out type1, out node1> ')'								(. node = node1;
																				   type = type1; .)
	).	 

/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/

RType<out RType rtype>																			(. Queue<Types> formals; Types type; 
																								   RType rtype1;	.)
=																								(. rtype = new RType(); .) 																						
		(
		  "fun"																					(. rtype.type = Types.fun;
																								   formals = new Queue<Types>(); .)

		      '(' { Type<out type>																(. formals.Enqueue(type); .)
			      {',' Type<out type>															(. formals.Enqueue(type); .)
				  }} ')'																		
				  RType<out rtype1>																(. rtype1.formals = formals;
																								   rtype.next = rtype1;.)	 
						
		| "int"																					(.  rtype.type = Types.integer; .) 
		| "bool"																				(.  rtype.type = Types.boolean; .)
		).
/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/

Type<out Types type> 
=																				(. type = Types.undef; .)
 (																				
	  "fun"																		(. type = Types.fun; .) 
	| "int"																		(. type = Types.integer; .)
	| "bool"																	(. type = Types.boolean; .)
	| "url"																		(. type = Types.url; .)
  ).		
		
/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/		  

AddOp<out ASTNode op>
=															(. op = new Node(Labels.Plus); .)					
  (																				
	  '+' 
	| '-'													(. op = new Node(Labels.Minus); .)												
   ).

/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/		  

RelOp<out ASTNode op>
 =																(. op = new Node(Labels.Lt); .)				
	(																			
	   '<'																		
	 | '>'														(. op = new Node(Labels.Gt); .)
	 | "=="														(. op = new Node(Labels.Eq); .)
	 | "!="														(. op = new Node(Labels.NotEq); .)
	 | "<="														(. op = new Node(Labels.Lte); .)	
	 | ">="														(. op = new Node(Labels.Gte); .)
   ). 

/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/		  

BoolOp<out ASTNode op>
 =																(. op = new Node(Labels.And); .)														
	(																			
	    "&&" 
	  | "||"													(. op = new Node(Labels.Or);  .)
	).

/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/

MulOp<out ASTNode op>
 =														(. op = new Node(Labels.Mul); .)					
	(																			
	    '*' 
	  | '/'												(. op = new Node(Labels.Div); .)									
	).               

/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/

Ident<out string name>
 = ident												(. name = t.val; .).

	  
END Fun.